import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/word.dart';
import '../models/user.dart';

class ApiService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Gateway –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  static const String apiGatewayUrl = 'http://localhost:3011';
  static const String authBaseUrl = '$apiGatewayUrl/auth';
  
  // –û–±—Ä–∞—â–∞–µ–º—Å—è —á–µ—Ä–µ–∑ API Gateway
  static const String vocabularyBaseUrl = '$apiGatewayUrl/vocabulary';
  
  String? _accessToken;
  String? _refreshToken;
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ SharedPreferences
  Future<void> loadTokens() async {
    final prefs = await SharedPreferences.getInstance();
    _accessToken = prefs.getString('access_token');
    _refreshToken = prefs.getString('refresh_token');
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ SharedPreferences
  Future<void> saveTokens(String accessToken, String refreshToken) async {
    _accessToken = accessToken;
    _refreshToken = refreshToken;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('access_token', accessToken);
    await prefs.setString('refresh_token', refreshToken);
  }
  
  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
  Future<void> clearTokens() async {
    _accessToken = null;
    _refreshToken = null;
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('access_token');
    await prefs.remove('refresh_token');
  }
  
  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    if (_accessToken != null) 'Authorization': 'Bearer $_accessToken',
  };

  // ============= AUTH ENDPOINTS =============
  
  // –õ–æ–≥–∏–Ω
  Future<AuthResponse> login(String email, String password) async {
    final url = '$authBaseUrl/login';
    print('üîê Login URL: $url');
    print('üîê authBaseUrl: $authBaseUrl');
    
    final response = await http.post(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'email': email,
        'password': password,
      }),
    );
    
    print('üì° Response status: ${response.statusCode}');
    print('üì° Response body length: ${response.body.length}');
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      print('‚úÖ Parsed response data');
      print('üîë Has access_token: ${data['access_token'] != null}');
      print('üîë Has user: ${data['user'] != null}');
      
      final authResponse = AuthResponse.fromJson(data);
      print('‚úÖ AuthResponse created');
      print('üë§ User email: ${authResponse.user.email}');
      
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      print('üíæ Tokens saved');
      
      return authResponse;
    } else {
      print('‚ùå Login failed with status: ${response.statusCode}');
      print('‚ùå Response body: ${response.body}');
      final error = json.decode(response.body);
      throw Exception(error['message'] ?? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<AuthResponse> register({
    required String email,
    required String password,
    required String name,
    required String surname,
    List<String> roles = const ['student'],
  }) async {
    final response = await http.post(
      Uri.parse('$authBaseUrl/register'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'email': email,
        'password': password,
        'name': name,
        'surname': surname,
        'roles': roles,
      }),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      final authResponse = AuthResponse.fromJson(data);
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      return authResponse;
    } else {
      final error = json.decode(response.body);
      throw Exception(error['message'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  Future<AuthResponse> refreshAccessToken() async {
    if (_refreshToken == null) {
      throw Exception('–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞');
    }
    
    final response = await http.post(
      Uri.parse('$authBaseUrl/refresh-token'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'refresh_token': _refreshToken,
      }),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      final authResponse = AuthResponse.fromJson(data);
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      return authResponse;
    } else {
      await clearTokens();
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  Future<User> getProfile() async {
    await loadTokens();
    final response = await http.get(
      Uri.parse('$authBaseUrl/profile'),
      headers: _headers,
    );
    
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return User.fromJson(data);
    } else if (response.statusCode == 401) {
      // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      await refreshAccessToken();
      return getProfile(); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // ============= VOCABULARY ENDPOINTS =============

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
  Future<List<Word>> getLexicon({String? galaxy, String? subtopic}) async {
    await loadTokens();
    
    print('üìö getLexicon called');
    print('üìö galaxy: $galaxy, subtopic: $subtopic');
    print('üìö access_token present: ${_accessToken != null}');
    
    final queryParams = <String, String>{};
    if (galaxy != null) queryParams['galaxy'] = galaxy;
    if (subtopic != null) queryParams['subtopic'] = subtopic;
    
    final uri = Uri.parse('$vocabularyBaseUrl/lexicon')
        .replace(queryParameters: queryParams);
    
    print('üìö Request URL: $uri');
    print('üìö Headers: ${_headers.keys.join(", ")}');
    
    final response = await http.get(uri, headers: _headers);
    
    print('üìö Response status: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      print('üìö Response body (first 500 chars): ${response.body.substring(0, response.body.length > 500 ? 500 : response.body.length)}');
      final responseData = json.decode(response.body);
      print('üìö Response structure: ${responseData.runtimeType}');
      
      // –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "data"
      List<dynamic> data;
      if (responseData is List) {
        print('üìö Response is List directly');
        data = responseData;
      } else if (responseData is Map && responseData.containsKey('data')) {
        print('üìö Response is Map with "data" key');
        data = responseData['data'];
      } else {
        print('‚ùå Unexpected response structure');
        throw Exception('Unexpected response structure');
      }
      
      print('üìö Number of words: ${data.length}');
      if (data.isNotEmpty) {
        print('üìö First word structure: ${data[0]}');
      }
      return data.map((json) => Word.fromJson(json)).toList();
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return getLexicon(galaxy: galaxy, subtopic: subtopic);
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
  Future<Word> addWord({
    required String word,
    required String sourceLang,
    required String targetLang,
    String? galaxy,
    String? subtopic,
    String? translation,
    String? type,
  }) async {
    await loadTokens();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –±—ç–∫–µ–Ω–¥ (–∫–∞–∫ –≤ Angular)
    final Map<String, dynamic> body = {
      'word': word,
      'galaxy': galaxy,
      'subtopic': subtopic,
      'type': type ?? 'word',
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ translations (–∫–∞–∫ –≤ Angular)
    if (translation != null && translation.isNotEmpty) {
      body['translations'] = [
        {
          'id': 0,
          'lexiconId': 0,
          'source': word,
          'target': translation,
          'sourceLang': sourceLang,
          'targetLang': targetLang,
          'meaning': '',
          'example': null,
        }
      ];
    }

    final response = await http.post(
      Uri.parse('$vocabularyBaseUrl/lexicon'),
      headers: _headers,
      body: json.encode(body),
    );

    if (response.statusCode == 201 || response.statusCode == 200) {
      return Word.fromJson(json.decode(response.body));
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return addWord(
        word: word,
        sourceLang: sourceLang,
        targetLang: targetLang,
        galaxy: galaxy,
        subtopic: subtopic,
        translation: translation,
        type: type,
      );
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞');
    }
  }
  
  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
  Future<String> requestTranslation({
    required String word,
    required String sourceLang,
    required String targetLang,
  }) async {
    await loadTokens();

    final response = await http.post(
      Uri.parse('$vocabularyBaseUrl/translate'),
      headers: _headers,
      body: json.encode({
        'word': word,
        'sourceLang': sourceLang,
        'targetLang': targetLang,
      }),
    );

    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      if (data['translations'] != null && data['translations'] is List) {
        final translations = data['translations'] as List;
        if (translations.isNotEmpty) {
          return translations[0].toString();
        }
      }
      return '';
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return requestTranslation(
        word: word,
        sourceLang: sourceLang,
        targetLang: targetLang,
      );
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ
  Future<void> deleteWord(int wordId) async {
    await loadTokens();

    final response = await http.delete(
      Uri.parse('$vocabularyBaseUrl/lexicon/$wordId'),
      headers: _headers,
    );

    if (response.statusCode == 200 || response.statusCode == 204) {
      return;
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return deleteWord(wordId);
    } else {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞');
    }
  }

  // üì± [MOBILE APP] –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥—Ç–µ–º–∞–º
  Future<Map<String, Map<String, int>>> getSubtopicsStats(String galaxy) async {
    await loadTokens();

    final uri = Uri.parse('$vocabularyBaseUrl/lexicon/stats/subtopics')
        .replace(queryParameters: {'galaxy': galaxy});

    final response = await http.get(uri, headers: _headers);

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      final Map<String, Map<String, int>> stats = {};
      
      for (var item in data) {
        stats[item['subtopic']] = {
          'totalWords': item['totalWords'] as int,
          'totalExpressions': item['totalExpressions'] as int,
          'total': item['total'] as int,
          'translatedWords': item['translatedWords'] as int? ?? 0,
          'untranslatedWords': item['untranslatedWords'] as int? ?? 0,
          'translatedExpressions': item['translatedExpressions'] as int? ?? 0,
          'untranslatedExpressions': item['untranslatedExpressions'] as int? ?? 0,
        };
      }
      
      return stats;
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return getSubtopicsStats(galaxy);
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å
  Future<String> recognizeSpeech(String audioPath) async {
    await loadTokens();
    
    try {
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('$vocabularyBaseUrl/speech/recognize'),
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
      if (_accessToken != null) {
        request.headers['Authorization'] = 'Bearer $_accessToken';
      }
      
      request.files.add(await http.MultipartFile.fromPath('audio', audioPath));
      
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = json.decode(response.body);
        return data['text'] ?? '';
      } else if (response.statusCode == 401) {
        await refreshAccessToken();
        return recognizeSpeech(audioPath);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: $e');
      return '';
    }
  }
}



