import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/word.dart';
import '../models/user.dart';

class ApiService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Gateway –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  static const String apiGatewayUrl = 'http://localhost:3011';
  static const String authBaseUrl = '$apiGatewayUrl/auth';
  static const String vocabularyBaseUrl = '$apiGatewayUrl/vocabulary';
  
  String? _accessToken;
  String? _refreshToken;
  
  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ SharedPreferences
  Future<void> loadTokens() async {
    final prefs = await SharedPreferences.getInstance();
    _accessToken = prefs.getString('access_token');
    _refreshToken = prefs.getString('refresh_token');
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ SharedPreferences
  Future<void> saveTokens(String accessToken, String refreshToken) async {
    _accessToken = accessToken;
    _refreshToken = refreshToken;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('access_token', accessToken);
    await prefs.setString('refresh_token', refreshToken);
  }
  
  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
  Future<void> clearTokens() async {
    _accessToken = null;
    _refreshToken = null;
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('access_token');
    await prefs.remove('refresh_token');
  }
  
  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    if (_accessToken != null) 'Authorization': 'Bearer $_accessToken',
  };

  // ============= AUTH ENDPOINTS =============
  
  // –õ–æ–≥–∏–Ω
  Future<AuthResponse> login(String email, String password) async {
    final url = '$authBaseUrl/login';
    print('üîê Login URL: $url');
    print('üîê authBaseUrl: $authBaseUrl');
    
    final response = await http.post(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'email': email,
        'password': password,
      }),
    );
    
    print('üì° Response status: ${response.statusCode}');
    print('üì° Response body length: ${response.body.length}');
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      print('‚úÖ Parsed response data');
      print('üîë Has access_token: ${data['access_token'] != null}');
      print('üîë Has user: ${data['user'] != null}');
      
      final authResponse = AuthResponse.fromJson(data);
      print('‚úÖ AuthResponse created');
      print('üë§ User email: ${authResponse.user.email}');
      
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      print('üíæ Tokens saved');
      
      return authResponse;
    } else {
      print('‚ùå Login failed with status: ${response.statusCode}');
      print('‚ùå Response body: ${response.body}');
      final error = json.decode(response.body);
      throw Exception(error['message'] ?? '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  Future<AuthResponse> register({
    required String email,
    required String password,
    required String name,
    required String surname,
    List<String> roles = const ['student'],
  }) async {
    final response = await http.post(
      Uri.parse('$authBaseUrl/register'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'email': email,
        'password': password,
        'name': name,
        'surname': surname,
        'roles': roles,
      }),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      final authResponse = AuthResponse.fromJson(data);
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      return authResponse;
    } else {
      final error = json.decode(response.body);
      throw Exception(error['message'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  }
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  Future<AuthResponse> refreshAccessToken() async {
    if (_refreshToken == null) {
      throw Exception('–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞');
    }
    
    final response = await http.post(
      Uri.parse('$authBaseUrl/refresh-token'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'refresh_token': _refreshToken,
      }),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      final data = json.decode(response.body);
      final authResponse = AuthResponse.fromJson(data);
      await saveTokens(authResponse.accessToken, authResponse.refreshToken);
      return authResponse;
    } else {
      await clearTokens();
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  Future<User> getProfile() async {
    await loadTokens();
    final response = await http.get(
      Uri.parse('$authBaseUrl/profile'),
      headers: _headers,
    );
    
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      return User.fromJson(data);
    } else if (response.statusCode == 401) {
      // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
      await refreshAccessToken();
      return getProfile(); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }

  // ============= VOCABULARY ENDPOINTS =============

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å
  Future<List<Word>> getLexicon({String? galaxy, String? subtopic}) async {
    await loadTokens();
    
    final queryParams = <String, String>{};
    if (galaxy != null) queryParams['galaxy'] = galaxy;
    if (subtopic != null) queryParams['subtopic'] = subtopic;
    
    final uri = Uri.parse('$vocabularyBaseUrl/lexicon')
        .replace(queryParameters: queryParams);
    
    final response = await http.get(uri, headers: _headers);
    
    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body)['data'];
      return data.map((json) => Word.fromJson(json)).toList();
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return getLexicon(galaxy: galaxy, subtopic: subtopic);
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è');
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
  Future<Word> addWord({
    required String word,
    required String sourceLang,
    required String targetLang,
    String? galaxy,
    String? subtopic,
  }) async {
    await loadTokens();
    
    final response = await http.post(
      Uri.parse('$vocabularyBaseUrl/lexicon'),
      headers: _headers,
      body: json.encode({
        'word': word,
        'sourceLang': sourceLang,
        'targetLang': targetLang,
        'galaxy': galaxy,
        'subtopic': subtopic,
      }),
    );
    
    if (response.statusCode == 201 || response.statusCode == 200) {
      return Word.fromJson(json.decode(response.body));
    } else if (response.statusCode == 401) {
      await refreshAccessToken();
      return addWord(
        word: word,
        sourceLang: sourceLang,
        targetLang: targetLang,
        galaxy: galaxy,
        subtopic: subtopic,
      );
    } else {
      throw Exception('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞');
    }
  }

  // –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å
  Future<String> recognizeSpeech(String audioPath) async {
    await loadTokens();
    
    try {
      var request = http.MultipartRequest(
        'POST',
        Uri.parse('$vocabularyBaseUrl/speech/recognize'),
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
      if (_accessToken != null) {
        request.headers['Authorization'] = 'Bearer $_accessToken';
      }
      
      request.files.add(await http.MultipartFile.fromPath('audio', audioPath));
      
      final streamedResponse = await request.send();
      final response = await http.Response.fromStream(streamedResponse);
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = json.decode(response.body);
        return data['text'] ?? '';
      } else if (response.statusCode == 401) {
        await refreshAccessToken();
        return recognizeSpeech(audioPath);
      } else {
        throw Exception('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: $e');
      return '';
    }
  }
}



